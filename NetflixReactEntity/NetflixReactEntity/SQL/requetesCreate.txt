CREATE TABLE type_utilisateur(
    	id_type_utilisateur int  identity(1,1) NOT NULL,
    	is_admin bit,
	Primary key clustered(id_type_utilisateur asc)
);

CREATE TABLE utilisateur (
    	id_utilisateur int  identity(1,1) NOT NULL,
    	nom_profil VARCHAR(20) NOT NULL,
	prenom VARCHAR(20) NOT NULL,
	date_naissance datetime NOT NULL,
	email VARCHAR(20) NOT NULL,
	telephone VARCHAR(20),
	mdp VARCHAR(20) NOT NULL,
    	OrderNumber int NOT NULL,
	Primary key clustered(id_utilisateur asc),
    	id_type_utilisateur int FOREIGN KEY REFERENCES type_utilisateur(id_type_utilisateur)
);

create table droits_utilisateur (
 	id_droits_utilisateurs int  identity(1,1) NOT NULL,
	nom_droits VARCHAR,
	Primary key clustered(id_droits_utilisateurs asc)
);


/**  table d'association   **/
CREATE TABLE type_utilisateur_droits (
	id_type_utilisateur int NOT NULL,
	id_droits_utilisateurs int NOT NULL
	, CONSTRAINT type_utilisateur_droits_PK PRIMARY KEY (id_type_utilisateur, id_droits_utilisateurs)
	, CONSTRAINT type_utilisateur_droits_type_utilisateur_FK FOREIGN KEY (id_type_utilisateur)
	REFERENCES type_utilisateur(id_type_utilisateur)
	, CONSTRAINT type_utilisateur_droits_droits_utilisateur_FK FOREIGN KEY (id_droits_utilisateurs)
	REFERENCES droits_utilisateur(id_droits_utilisateurs)
);


CREATE TABLE Abonnement(
    	id_abonnement int  identity(1,1) NOT NULL,
    	debut_abonnement dateTime,
	fin_abonnement dateTime,
	abonnement_actif bit,
	Primary key clustered(id_abonnement asc),
    	id_utilisateur int FOREIGN KEY REFERENCES utilisateur(id_utilisateur)
);


create table questions_reponses (
 	id_question_reponse int  identity(1,1) NOT NULL,
	question VARCHAR NOT NULL,
	reponse VARCHAR,
	Primary key clustered(id_question_reponse asc)
);


CREATE TABLE profil (
    	id_profil int  identity(1,1) NOT NULL,
    	type_profil VARCHAR(20) NOT NULL,
	nom_profil VARCHAR(20) NOT NULL,
	Primary key clustered(id_profil asc)
);


/**  table d'association   **/
CREATE TABLE utilisateur_profil (
	id_utilisateur int NOT NULL,
	id_profil int NOT NULL
	, CONSTRAINT utilisateur_profil_PK PRIMARY KEY (id_utilisateur, id_profil)
	, CONSTRAINT utilisateur_profil_utilisateur_FK FOREIGN KEY (id_utilisateur)
	REFERENCES utilisateur(id_utilisateur)
	, CONSTRAINT utilisateur_profil_profil_FK FOREIGN KEY (id_profil)
	REFERENCES profil(id_profil)
);
	